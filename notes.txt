we have to create a sever (express server) so that it "listens" to the request from client side and listen on a port so that anyone can connect 


app.use((req,res)=>{
    res.send("hello from the server")
}) 
this function is called a response handler




app.use("/",(req,res)=>{
    res.send("hello from the server")
})

app.use("/test",(req,res)=>{
    res.send("hello from test page")
})

app.use("/hello",(req,res)=>{
    res.send("hello from hello page")
}) 
if you use this order the issue is with .use method 
even if you change the port to /hello or /test it shows "hello from the server" bcz it reads any routes that start with "/" and show hello from the server
also if you remove 1st handelerand  write /hello/abc it will show hello from hello page bcz this handler handeles anything after this route bcz it starts with /hello 
why?
    bcz .use matches the "/" first and  shows it in the hello and test port 
    fix 
        1- .use-> .get
                app.use("/test") will match all method api calls to /test. ex /test/xyz 
                app.get("/test") will only handle get call to /test
        2- change the order. It matter bcz when theres a request on the serever it starts reading the code from the top first it checks if there is /test than /hello and then / so this will work file bcz above 2 don't match the 3rd as they have soem extraa infoa s well apart from just / so it will go to the 3rd one 




Advanced hashing technique 
1. /ab?c -> means b is optional. abc will work and ac will work 
2. /ab+c -> means you can add b number of times. abc will work  and abbbbbbbbbbbbbbc will work
3. /ab*cd -> means you you can add anything btw ab and cd. abcd will work and abaskkjdaldalksdaskdadcd will work 
4. /a(bc)?d -> you can group like this means bc is optional
5. /a(bc)+d -> abcbcbcd will work 
YOU can write regex instead of strings 
6. /a/ -> means it will run anywhere a exists in the url like /a or /cap
7. /.*fly$/ -> means any url that ends with fly will run like /fly or /butterfly 



app.get("/user",(req,res)=>{
    console.log(req.query); this is how you read what's sent 
    res.send({
        "firstname":"kushagra",
        "lastname":"agarwal"
    })

})

to make the routes dynamic like /user/101 
app.get("/user/:userId",(req,res)=>{
    console.log(req.params); this will print { userId: '101' }
    
    
    res.send({
        "firstname":"kushagra",
        "lastname":"agarwal"
    })

})